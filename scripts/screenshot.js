const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function takeScreenshot() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
  
  const browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
  await page.setViewport({
    width: 1200,
    height: 800,
    deviceScaleFactor: 2 // –î–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
  });
  
  console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥...');
  
  // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  let loaded = false;
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3...`);
      await page.goto('https://bogachev11.github.io/french-challenge', {
        waitUntil: 'domcontentloaded', // –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        timeout: 30000
      });
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º —É—Å–ª–æ–≤–∏–µ–º
      try {
        await page.waitForSelector('.recharts-cartesian-axis', { timeout: 15000 });
        console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      } catch (e) {
        console.log('‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
      
      loaded = true;
      break;
    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      if (attempt < 3) {
        console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
  }
  
  if (!loaded) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫');
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  const screenshotsDir = path.join(__dirname, '..', 'screenshots');
  if (!fs.existsSync(screenshotsDir)) {
    fs.mkdirSync(screenshotsDir, { recursive: true });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
  const today = new Date().toISOString().split('T')[0];
  const screenshotPath = path.join(screenshotsDir, `dashboard_${today}.png`);
  
  console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç: ${screenshotPath}`);
  
  // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
  await page.screenshot({
    path: screenshotPath,
    fullPage: true,
    type: 'png'
  });
  
  await browser.close();
  
  console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤!');
  
  return screenshotPath;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  takeScreenshot().catch(console.error);
}

module.exports = takeScreenshot;
